#!/usr/bin/env bash

## `ls` colorized output; see COLORS.md for further explanation

if ls --color > /dev/null 2>&1; then
  colorflag="--color" # GNU and Linux
  export LS_COLORS="di=1;36:ln=1;32:so=37:pi=1;31;40:ex=35:bd=37:cd=37:su=37:sg=37:tw=32:ow=32"
else # BSD and macOS
  colorflag="-G"
  export CLICOLOR=1
  export LSCOLORS="GxCxhxBafxhxhxhxhxcxcx"
fi

## `git status` prompt

prompt() {
  local s="";
  local branchName="";
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == "0" ]; then # check for a valid Git repository
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then # abort inside .git directory
      git update-index --really-refresh -q &>/dev/null;
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+="+"; # Uncommited changes [+]
      fi;
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+="!"; # unstaged changes [!]
      fi;
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+="?"; # untracked files [?]
      fi;
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+="$"; # stashed files [$]
      fi;
    fi;

# display current branch name

    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || git rev-parse --short HEAD 2> /dev/null || echo "(unknown)")";
    [ -n "${s}" ] && s=" [${s}]";
    echo "${1}${branchName}${2}${s}"; # for example, master
  else
    return;
  fi;
}

## color resets

tput sgr0;
reset=$(tput sgr0);

# fallback for Apple Terminal.
# TODO: check for full color support dynamically.

if [ "$(echo $TERM_PROGRAM)" == "Apple_Terminal" ]; then
  # these are set in ./setup.terminal
  blue=$(tput setaf 4);
  green=$(tput setaf 2);
  orange=$(tput setaf 9);
  red=$(tput setaf 1);
  violet=$(tput setaf 12);
  white=$(tput setaf 7);
  yellow=$(tput setaf 3);
else
  blue="\e[38;2;68;146;191m"; #4ea5d9
  green="\e[38;2;121;206;128m"; #79ce80
  orange="\e[38;2;255;87;45m"; #ff572d
  red="\e[38;2;224;52;49m"; #e03431
  violet="\e[38;2;87;98;213m"; #5762d5
  white="\e[38;2;249;249;249m"; #f9f9f9
  yellow="\e[38;2;232;227;102m"; #e8e366
fi

if [[ "${USER}" == "root" ]]; then
  userStyle="${red}"; # for running as root
else
  userStyle="${violet}"; # regular users
fi;
if [[ "${SSH_TTY}" ]]; then
  userStyle="${yellow}"; # running over ssh
fi;

# apply prompt

PS1="\[\033[1;37m\]";
PS1+="\n";
PS1+="\[${userStyle}\]\u ";
PS1+="\[${green}\]\w";
PS1+="\$(prompt \" \[${blue}\]\" \"\[${orange}\]\")";
PS1+="\[${white}\]\n";
if [[ "${USER}" == "root" ]]; then
  PS1+="# \[${reset}\]"; # for running as root (#)
else
  PS1+="$ \[${reset}\]"; # regular users ($)
fi;
